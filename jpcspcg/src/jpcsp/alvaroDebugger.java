/*
This file is part of jpcspCG.

JPCSPCG is and addition to the jpcsp software: you can redistribute it 
and/or modify it under the terms of the GNU General Public License as published 
by the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

You should have received a copy of the GNU General Public License
along with Jpcsp.  If not, see <http://www.gnu.org/licenses/>.
 */
package jpcsp;

import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.util.concurrent.Semaphore;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.Timer;
import jpcsp.HLE.modules150.sceMpeg;

/**
 *
 * @author APequeno
 */
public class alvaroDebugger extends javax.swing.JFrame {
    private static boolean LOADING_DEBUGGER_ON = true;
    
    /**
     * Creates new form alvaroDebugger
     */
    private Semaphore synch;
    public alvaroDebugger() {
        initComponents();
        super.setDefaultCloseOperation(HIDE_ON_CLOSE);
        this.synch = new Semaphore(1);
        int w = (int) (0.21 * Toolkit.getDefaultToolkit().getScreenSize().getWidth());
        if ( w < 470 ) {
            w = 470;
        }
        super.setSize(w, 343);
        
        Timer t = new Timer(100, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent event) {
                // 
                
                if (MainGUI.a_es != null && MainGUI.a_dshower != null && MainGUI.a_dshower.isVisible() && LOADING_DEBUGGER_ON && (MainGUI.a_dshower.getNumberOfObjectsInScene() - MainGUI.a_dshower.getSceneCurrentIndex() < 4)) {
                        if (MainGUI.a_dshower.getIndexOfScene() != 120 && MainGUI.a_dshower.getIndexOfScene() != 208 && !MainGUI.a_dshower.isMenuScene() && MainGUI.a_es.isLoadingColor(false)) {
                            MainGUI.a_dshower.stop();
                        }
                }
            }
        });
        t.start();
    }
    
    public static boolean isLoadingDebuggingEnabled() {
        return LOADING_DEBUGGER_ON;
    }
    
    public static void activateLoadingDebugging() {
        LOADING_DEBUGGER_ON = true;
    }
    
    public static void deactivateLoadingDebugging() {
        LOADING_DEBUGGER_ON = false;
    }
    
    
    public int getAddress() {
        return Integer.parseInt(this.jTextField1.getText());
    }
    
    public void setLoading(boolean loading) {
        this.jLabel3.setText("Loading: " + loading);
    }
    
    public void escreveNaConsola(Object o) {
        try {
            this.synch.acquire();
            this.jTextArea1.setText(this.jTextArea1.getText() + o.toString() + "\n");
            this.jTextArea1.setCaretPosition(this.jTextArea1.getText().length());
            this.synch.release();
        } catch (InterruptedException ex) {
            Logger.getLogger(alvaroDebugger.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("AlvaroDebugger");

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jButton1.setText("Clean");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("GO");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel3.setText("<Loading>");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 402, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 271, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(0, 2, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        this.jTextArea1.setText("");
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        String text = this.jTextField1.getText();
        try {
            if (text.contains("epshot")) {
                ImageIO.write(MainGUI.a_es.extractEventButtonTriangle(), "png", 
                        new java.io.File("CodeGeassSpeech/extractedEButton.png"));
            }

            if (text.contains("ebshot")) {
                ImageIO.write(MainGUI.a_es.extractEventBackgroundBI(), "png", 
                        new java.io.File("CodeGeassSpeech/extractedEBBI.png"));
            }

            if (text.contains("stshot")) {
                int n = 0;
                java.io.File f; 
                do {
                    n++;
                    f = new java.io.File("CodeGeassSpeech/extractedSpeech" + n + ".png");
                } while (f.exists());
                ImageIO.write(MainGUI.a_es.extract(), "PNG", f);
            
            }
            
            if (text.contains("getFJL")) {
                int sIndex = text.indexOf("(") + 1;
                int eIndex = text.indexOf(")");
                if (Character.isDigit(text.charAt(sIndex))) {
                    //ImageIO.write(MainGUI.a_es.getFirstJapaneseLetter(Integer.parseInt(text.substring(sIndex, eIndex))), "png", new java.io.File("CodeGeassSpeech/extractedLetter.png"));
                }
            }
            
            if (text.contains("BBIShot")) {
                int n = 0;
                java.io.File f;
                do {
                    n++;
                    f = new java.io.File("CodeGeassSpeech/extractedBackgroundBI" + n + ".png");
                } while (f.exists());
                ImageIO.write(MainGUI.a_es.getBackgroundBI(), "PNG", f);
            }
            
            if (text.contains("getBackgroundAIs")) {
                ImageIO.write(MainGUI.a_es.getBackgroundBI().getSubimage(0, 0, 50, 20), "PNG", 
                        new java.io.File("CodeGeassSpeech/ai.png"));
                ImageIO.write(MainGUI.a_es.getBackgroundBI().getSubimage(0, 20, 50, 20), "PNG", 
                        new java.io.File("CodeGeassSpeech/ai2.png"));
            }
            
            if (text.contains("sbshot")) {
                ImageIO.write(MainGUI.a_es.extractSceneBI(), "PNG", 
                        new java.io.File("CodeGeassSpeech/extractedSceneBI.png"));
            }
            if (text.contains("etebi")) {
                ImageIO.write(MainGUI.a_es.extractTimerEventBackgroundBI(), "PNG", 
                        new java.io.File("CodeGeassSpeech/extractedTimerEventBI.png"));
            }
            if (text.contains("adspause")) {
                MainGUI.a_dshower.pause();
            }
            if (text.contains("adsunpause")) {
                MainGUI.a_dshower.unpause();
            }
            if (text.contains("skipcs")) {
                MainGUI.a_dshower.stop();
            }
            if (text.contains("skipcp")) {
                MainGUI.a_dshower.next();
            }
            if (text.contains("seb_cross_shot")) {
                    ImageIO.write(MainGUI.a_es.extractEventButtonCross(), "png", 
                            new java.io.File("CodeGeassSpeech/ExtractedCrossEventButton.png"));
            }
            if (text.contains("seb_square_shot")) {
                ImageIO.write(MainGUI.a_es.extractEventButtonSquare(), "png",
                        new java.io.File("CodeGeassSpeech/ExtractedSquareEventButton.png"));
            }
            if (text.contains("seb_circle_shot")) {
                ImageIO.write(MainGUI.a_es.extractEventButtonCircle(), "png",
                        new java.io.File("CodeGeassSpeech/ExtractedCircleEventButton.png"));
            }
            if (text.contains("ejap_Letters(")) {
                int value = Integer.parseInt(text.substring(text.indexOf('(') + 1, text.lastIndexOf(')')));
                ImageIO.write(MainGUI.a_es.getJapaneseLetters(value), "png",
                        new java.io.File("CodeGeassSpeech/JapaneseLettersTest.png"));
            }
            if (text.equals("ejap_LetterBools")) {
                boolean[] b = MainGUI.a_es.getJapaneseLettersBooleans(false);
                escreveNaConsola(b[0] + ", " + b[1] + ", " + b[2]);
            }
            if (text.equals("ejap_LetterBoolsImage")) {
                BufferedImage bi = MainGUI.a_es.getJapaneseLettersBooleansImage(false);
                ImageIO.write(bi, "png", new java.io.File("CodeGeassSpeech/EJAP_LetterBoolsImage.png"));
            }
            if (text.contains("isGUID")) {
                escreveNaConsola(MainGUI.a_es.isGUIDown());
            }
            if(text.contains("extGUID")) {
                ImageIO.write(MainGUI.a_es.getGUIDownImage(), "png",
                        new java.io.File("CodeGeassSpeech/GUIDOWN.png"));
            }
            if(text.contains("imageWidth")) {
                escreveNaConsola("Image Width:"+ MainGUI.a_es.getImageWidth());
            }
            if (text.contains("getLoading()")) {
                ImageIO.write(MainGUI.a_es.getLoadingImage(), "png",
                        new java.io.File("CodeGeassSpeech/Loading.png"));
            }
            if (text.contains("checkLoading")) {
                setLoading(MainGUI.a_es.isLoadingColor(true));
            }
            
            if (text.contains("checkAS")) {
                escreveNaConsola(MainGUI.a_es.isAutoSkipping());
            }
            
            if (text.contains("stopAutoSkip")) {
                jpcsp.Controller.getInstance().stopAutoSkip();
            }
            
            if (text.contains("getASI")) {
                
                ImageIO.write(MainGUI.a_es.getAutoSkippingImage(), "png",
                        new java.io.File("CodeGeassSpeech/AutoSkipImage.png"));
            }
            if (text.contains("releaseAll")) {
                jpcsp.Controller.getInstance().releaseEverything();
            }
            if (text.contains("isFLS")) {
                escreveNaConsola(MainGUI.a_es.isFirstLetterShown());
            }
            if (text.contains("isForthLS")) {
                escreveNaConsola(MainGUI.a_es.isFourthLetterShown());
            }
            if (text.contains("isSLFLS")) {
                escreveNaConsola(MainGUI.a_es.isSecondLineFirstLetterShown());
            }
            if (text.contains("getSceneIndex")) {
                escreveNaConsola("Scene Index: " + MainGUI.a_dshower.getIndexOfScene());
            }
            if (text.contains("help")){
                escreveNaConsola("epshot");
                escreveNaConsola("ebshot");
                escreveNaConsola("stshot");
                escreveNaConsola("getFJL");
                escreveNaConsola("BBIshot");
                escreveNaConsola("getBackgroundAIs");
                escreveNaConsola("sbshot");
                escreveNaConsola("etebi");
                escreveNaConsola("adspause");
                escreveNaConsola("adsunpause");
                escreveNaConsola("skipcs");
                escreveNaConsola("skipcp");
                escreveNaConsola("seb_cross_shot");
                escreveNaConsola("seb_square_shot");
                escreveNaConsola("seb_circle_shot");
                escreveNaConsola("ejap_Letters");
                escreveNaConsola("ejap_LetterBools");
                escreveNaConsola("isGUID");
                escreveNaConsola("extGUID");
                escreveNaConsola("imageWidth");
                escreveNaConsola("getLoading()");
                escreveNaConsola("checkLoading");
                escreveNaConsola("checkAS");
                escreveNaConsola("stopAutoSkip");
                escreveNaConsola("releaseAll");
            }
       } catch (Exception e) {
           System.err.println(e);
       };
    }//GEN-LAST:event_jButton2ActionPerformed

    private boolean isNumber(String text) {
        for (int k = 0; k < text.length(); k++) {
            if (!Character.isDigit(text.charAt(k))) {
                return false;
            }
        }
        return true;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(alvaroDebugger.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(alvaroDebugger.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(alvaroDebugger.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(alvaroDebugger.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new alvaroDebugger().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
